[General]
network = Network
print-undisposed=false
record-eventlog = true

# Laufzeit über Kabel
**.channel.delay = 2ms

# TCP
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPReno"
**.tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled

**.tcp.mss = 536                                     # Maximum Segment Size (RFC 793) (header option)
**.tcp.advertisedWindow = 65535            # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)


# Simuliert wird wirklicher Transport von Daten 
**.tcpApp[*].dataTransferMode = "bytestream"

**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)

# Verwendung des eigenen HTTP-Client/Server über TCP
# HTTP-Client
**.client.numTcpApps = 1
**.client.tcpApp[0].typename = "HttpTcpClientApp"
**.client.tcpApp[0].localPort = 2080

**.client.tcpApp[0].connectAddress = "server" # Name des HTTP-Servers (Name des entsprechenden Omnet++-Objekts)
**.client.tcpApp[0].connectPort = 80

# HTTP-Server
**.server.numTcpApps = 1
**.server.tcpApp[0].typename = "HttpTcpServerApp"
**.server.tcpApp[0].localPort = 80

**.client.tcpApp[0].page = "page2" # Anzuforderndes Dokument

**.server.tcpApp[0].numBytes = 20000 # Länge des gelieferten Dokuments

# ### Hier anpassen ###############################################################
**.client.tcpApp[0].httpHost = "www.ks.de" # Name des HTTP-Servers im HTTP-Request
# #################################################################################

# ======================================================

[Config SlowStart]

**.server.tcpApp[0].numBytes = 7000 # Länge des gelieferten Dokuments

# ======================================================

[Config FastRetransmit]
# Verwendung des eigenen HTTP-Client/Server über TCP

**.tcp.tcpAlgorithmClass = "TCPTahoe"

# Mit diesem Modul können Pakete vor der Übertragung definiert entfernt und 
# somit Paketverluste simuliert werden 
**.server.ppp[*].numOutputHooks = 1
**.server.ppp[*].outputHook[0].typename = "OrdinalBasedDropper"

**.server.ppp[*].outputHook[0].dropsVector ="11" # hier Paketverlust simulieren

# ======================================================

[Config RetransTimeout]
# Verwendung des eigenen HTTP-Client/Server über TCP

# Laufzeit über Kabel
**.channel.delay = 200ms

# Mit diesem Modul können Pakete vor der Übertragung definiert entfernt und 
# somit Paketverluste simuliert werden 
**.server.ppp[*].numOutputHooks = 1
**.server.ppp[*].outputHook[0].typename = "OrdinalBasedDropper"

# ### Hier anpassen ###############################################################
**.server.ppp[*].outputHook[0].dropsVector ="" # hier Paketverlust simulieren
# ###############################################################################

# ======================================================

[Config FlowControl]


**.channel.delay = 20ms # Laufzeit über Kabel
**.client.tcp.useDataNotification = true # Verarbeitungszeit der Anwendung simulieren

**.client.tcp.advertisedWindow = 2000  # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)

# ### Hier anpassen ###############################################################
**.client.tcpApp[0].processingTime  = (${processingTime=0,10}ms)  # Datenverarbeitungszeit der HTTP-Client-Anwendung
# ###############################################################################
